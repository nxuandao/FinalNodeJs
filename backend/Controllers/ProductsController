// Controllers/ProductsController.js
const Product = require('../Models/Product');

// GET /products
// Query: q (tên), color, category, page, limit, sort, order
// sort: name|price|createdAt|updatedAt ; order: asc|desc
const listProducts = async (req, res) => {
  try {
    const {
      q,
      color,
      category,
      page = 1,
      limit = 12,
      sort = 'createdAt',
      order = 'desc'
    } = req.query;

    // Xây điều kiện lọc
    const filter = { isActive: true };

    // Tìm theo tên sản phẩm (ưu tiên text search, fallback regex)
    if (q && q.trim()) {
      // Nếu có text index: dùng $text, nếu không khớp thì thêm regex OR
      filter.$or = [
        { $text: { $search: q } },
        { name: { $regex: q, $options: 'i' } }
      ];
    }

    // Theo màu sắc (hỗ trợ cả color đơn và mảng colors)
    if (color && color.trim()) {
      filter.$or = [
        ...(filter.$or || []),
        { color: { $regex: `^${escapeRegex(color)}$`, $options: 'i' } },
        { colors: { $elemMatch: { $regex: `^${escapeRegex(color)}$`, $options: 'i' } } }
      ];
    }

    // Theo phân loại (category)
    if (category && category.trim()) {
      filter.category = { $regex: `^${escapeRegex(category)}$`, $options: 'i' };
    }

    // Phân trang
    const pageNum = Math.max(parseInt(page) || 1, 1);
    const limitNum = Math.min(Math.max(parseInt(limit) || 12, 1), 100);

    // Sắp xếp
    const sortField = ['name', 'price', 'createdAt', 'updatedAt'].includes(String(sort))
      ? String(sort)
      : 'createdAt';
    const sortOrder = String(order).toLowerCase() === 'asc' ? 1 : -1;
    const sortObj = { [sortField]: sortOrder };

    const [items, total] = await Promise.all([
      Product.find(filter)
        .collation({ locale: 'vi', strength: 1 }) // so sánh không phân biệt hoa/thường & dấu
        .sort(sortObj)
        .skip((pageNum - 1) * limitNum)
        .limit(limitNum)
        .lean(),
      Product.countDocuments(filter)
    ]);

    return res.json({
      success: true,
      data: items,
      meta: {
        total,
        page: pageNum,
        limit: limitNum,
        pages: Math.ceil(total / limitNum),
        sort: sortField,
        order: sortOrder === 1 ? 'asc' : 'desc'
      }
    });
  } catch (err) {
    console.error('listProducts error:', err);
    return res.status(500).json({ success: false, message: 'Server error' });
  }
};

// Helper: escape regex
function escapeRegex(s = '') {
  return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

module.exports = { listProducts };
